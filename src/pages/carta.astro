---
// @ts-nocheck
import BaseLayout from '@/layouts/BaseLayout.astro';
import rawMenu from '@/data/menu.json';

// Mapea claves "icon" → ilustraciones (pon los SVG/PNG en /public/icons/)
const ICONS: Record<string, string> = {
  bocata: '/icons/bocata.png',
  campero: '/icons/campero.png',
  ensalada: '/icons/ensalada.png',
  burger: '/icons/hamburguesa.png',
  kebab: '/icons/kebab.png',
  lata: '/icons/lata.png',
  new: '/icons/new.png',
  pan: '/icons/pan.png',
  patatas: '/icons/patatas.png',
  picante: '/icons/picante.png',
  pollo: '/icons/pollo-asado.png',
  refrescos: '/icons/refrescos.png',
  salsa: '/icons/salsa.png',
  chef: '/icons/sombrero-de-chef.png',
};

// Slug sencillo (sin emojis, sin acentos, sin espacios)
function slugify(s: string) {
  return String(s)
    .trim()
    .normalize('NFD').replace(/[\u0300-\u036f]/g, '') // quita acentos
    .replace(/[^a-zA-Z0-9]+/g, '-')                  // no alfanum → guion
    .replace(/^-+|-+$/g, '')                         // bordes
    .toLowerCase();
}

// 1) Fuerzo un orden deseado por etiqueta
const ORDER = [
  'Nuestro fuerte',
  'Para compartir',
  'Ensaladas de la huerta',
  'Entrepanes',
  'Nuestros camperos',
  'Bebidas',
];

// Convierte el objeto de categorías → array
type Item = {
  name: string;
  price?: string | Record<string,string>;
  description?: string;
  icon?: string;
  badge?: string;
};

// 2) Construimos categorías con ese orden; si alguna no existe, la saltamos.
const categories = ORDER
  .filter((label) => Object.prototype.hasOwnProperty.call(rawMenu, label))
  .map((label) => {
    const cfg = rawMenu[label] || {};
    const id = slugify(label);
    const iconKey = cfg.icon || null;
    const iconPath = iconKey && ICONS[iconKey] ? ICONS[iconKey] : null;
    return {
      id,
      label,
      iconPath,
      description: cfg.description || '',
      items: Array.isArray(cfg.items) ? cfg.items : [],
    };
  });

function normalizeItem(it: Item) {
  const badge = it.badge === 'new' || (typeof it.name === 'string' && it.name.includes('🆕')) ? 'Nuevo' : null;
  const cleanName = typeof it.name === 'string' ? it.name.replace('🆕','').trim() : it.name;

  // icono por item (ilustración)
  const itemIconKey = it.icon && it.icon !== 'new' ? it.icon : null;
  const itemIconPath = itemIconKey && ICONS[itemIconKey] ? ICONS[itemIconKey] : null;

  // precio: string o objeto
  const isMulti = it.price && typeof it.price === 'object' && !Array.isArray(it.price);
  const priceSingle = !isMulti ? (it.price as string ?? null) : null;
  const priceMulti  = isMulti ? Object.entries(it.price as Record<string,string>) : null;

  return {
    name: cleanName,
    description: it.description ?? '',
    priceSingle,
    priceMulti,
    badge,
    iconPath: itemIconPath
  };
}

const pageTitle = 'Nuestra carta';
const pageDescription = 'Los mejores pollos asados, camperos, hamburguesas y más en Torremolinos';
---

<BaseLayout title={pageTitle} description={pageDescription}>
  <main class="menu">
    <!-- NAV (chips con icono de categoría si existe) -->
    <nav class="menu-nav sticky-header" aria-label="Categorías de la carta">
      <ul>
        {categories.map((c) => (
          <li>
            <a href={`#${c.id}`}>
              {c.iconPath && (
                <span class="chip__icon" aria-hidden="true">
                  <img src={c.iconPath} alt="" loading="lazy" decoding="async" />
                </span>
              )}
              <span class="chip__label">{c.label}</span>
            </a>
          </li>
        ))}
      </ul>
    </nav>

    {/* Secciones */}
    {categories.map((c) => (
      <section id={c.id} class="category-section">
        <h2>
          {c.iconPath && <img class="cat-icon" src={c.iconPath} alt="" loading="lazy" decoding="async" />} {c.label}
        </h2>

        {c.description && <p class="category-description">{c.description}</p>}

        <ul>
          {c.items.map((raw) => {
            const it = normalizeItem(raw);
            return (
              <li class="menu-item">
                <div class="item-header">
                  <strong>
                    {it.iconPath && <img class="item-icon" src={it.iconPath} alt="" loading="lazy" decoding="async" />}
                    {it.name}
                    {it.badge && <span class="badge badge--new">{it.badge}</span>}
                  </strong>

                  {it.priceSingle && <span class="single-price">{it.priceSingle}</span>}
                </div>

                {it.priceMulti && (
                  <ul class="multi-price">
                    {it.priceMulti.map(([portion, price]) => (
                      <li>
                        <span class="portion">{portion}</span>
                        <span class="price">{price}</span>
                      </li>
                    ))}
                  </ul>
                )}

                {it.description && <p class="item-description">{it.description}</p>}
              </li>
            );
          })}
        </ul>
      </section>
    ))}
  </main>

  <!-- Scroll suave + Scrollspy (activa pestaña al hacer scroll) -->
<script is:inline>
  const prefersNoMotion = matchMedia('(prefers-reduced-motion: reduce)').matches;

  // --- NODOS CLAVE ---
  const siteHeader = document.querySelector('.site-header');
  const chipsNav   = document.querySelector('.menu-nav.sticky-header');
  const navLinks   = Array.from(document.querySelectorAll('.menu-nav a[href^="#"]'));
  const sections   = Array.from(document.querySelectorAll('.category-section[id]'));

  // --- ALTURAS DINÁMICAS → CSS VARS ---
  const setStickyVars = () => {
    const headerH = siteHeader?.offsetHeight ?? 0;
    const chipsH  = chipsNav?.offsetHeight ?? 0;
    document.documentElement.style.setProperty('--chips-h', `${chipsH}px`);
    document.documentElement.style.setProperty('--sticky-total', `${headerH + chipsH}px`);
    computeSectionTops();
    rafUpdate();
  };
  addEventListener('resize', setStickyVars);
  addEventListener('load', setStickyVars);
  setStickyVars();

  // --- MAPA id → link ---
  const linksMap = new Map();
  for (const a of navLinks) {
    const href = a.getAttribute('href') || '';
    const id = href.startsWith('#') ? href.slice(1) : '';
    if (id) linksMap.set(id, a);
  }

  // --- SCROLL SUAVE EN CLIC ---
  navLinks.forEach((a) => {
    a.addEventListener('click', (e) => {
      const href = a.getAttribute('href') || '';
      const id = href.startsWith('#') ? href.slice(1) : '';
      const target = id ? document.getElementById(id) : null;
      if (!target) return;

      e.preventDefault();
      target.scrollIntoView({ behavior: prefersNoMotion ? 'auto' : 'smooth', block: 'start' });
      history.replaceState(null, '', `#${id}`);
    });
  });

  // --- PINTAR ACTIVO + AUTO-SCROLL HORIZONTAL DE CHIPS ---
  const scrollChipIntoView = (link) => {
    if (!link) return;
    link.scrollIntoView({ behavior: prefersNoMotion ? 'auto' : 'smooth', block: 'nearest', inline: 'center' });
  };

  const setActive = (id) => {
    let activeLink = null;
    linksMap.forEach((link, key) => {
      const isActive = key === id;
      link.classList.toggle('active', isActive);
      link.toggleAttribute('aria-current', isActive);
      if (isActive) activeLink = link;
    });
    scrollChipIntoView(activeLink);
  };

  // --- TABLA DE POSICIONES (ROBUSTA) ---
  let sectionTops = [];
  const computeSectionTops = () => {
    sectionTops = sections
      .map((s) => ({ id: s.id, top: s.getBoundingClientRect().top + scrollY }))
      .sort((a, b) => a.top - b.top);
  };
  computeSectionTops();

  // --- DETERMINAR ACTIVA POR POSICIÓN (header + chips) ---
  const getCurrentSectionId = () => {
    const stickyTotal = parseFloat(getComputedStyle(document.documentElement).getPropertyValue('--sticky-total')) || 0;
    const y = scrollY + stickyTotal + 1; // holgura
    let current = sectionTops[0]?.id || null;
    for (let i = 0; i < sectionTops.length; i++) {
      if (y >= sectionTops[i].top) current = sectionTops[i].id; else break;
    }
    return current;
  };

  // --- RAF THROTTLING ---
  let ticking = false;
  const rafUpdate = () => {
    if (ticking) return;
    ticking = true;
    requestAnimationFrame(() => {
      const id = getCurrentSectionId();
      if (id) setActive(id);
      ticking = false;
    });
  };

  document.addEventListener('scroll', rafUpdate, { passive: true });
  addEventListener('resize', () => { computeSectionTops(); rafUpdate(); });
  addEventListener('load',  () => { computeSectionTops(); rafUpdate(); });
  rafUpdate();

  // --- (Opcional) resaltar sección visible en el contenido ---
  const io = new IntersectionObserver((entries) => {
    entries.forEach((e) => e.target.classList.toggle('active-section', e.isIntersecting));
  }, {
    root: null,
    // arriba quitamos header+chips, abajo dejamos 50% para que el resaltado no “parpadee”
    rootMargin: `calc(-1 * var(--sticky-total, 0px)) 0px -50% 0px`,
    threshold: 0.2,
  });
  sections.forEach((s) => io.observe(s));
</script>



</BaseLayout>
